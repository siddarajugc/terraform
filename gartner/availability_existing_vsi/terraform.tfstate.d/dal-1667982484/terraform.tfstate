{
  "version": 4,
  "terraform_version": "1.3.2",
  "serial": 4,
  "lineage": "6f75ff43-5a6a-5129-35e7-71dae8d9b743",
  "outputs": {},
  "resources": [
    {
      "mode": "data",
      "type": "cloudinit_config",
      "name": "cloud-init-config",
      "provider": "provider[\"registry.terraform.io/hashicorp/cloudinit\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "base64_encode": false,
            "boundary": "MIMEBOUNDARY",
            "gzip": false,
            "id": "1678398320",
            "part": [
              {
                "content": "#cloud-config\napt:\n  conf: |\n     APT {\n         Get {\n             Assume-Yes \"true\";\n             Fix-Broken \"true\";\n         }\n     }\n  primary:\n    - arches: [default]\n      uri:  http://mirrors.adn.networklayer.com/ubuntu\npackage-update: true\npackage_upgrade: true\npackages:\n - python3\n - jq\n - fio\n - nginx\n - iperf\n - zlib1g-dev\n - libjpeg-dev\n - python3-pip",
                "content_type": "text/cloud-config",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#cloud-config\n\nwrite_files:\n  - path: \"/root/runFioTest.sh\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      #! /bin/bash\n      /usr/local/bin/bench-fio -e libaio --target /dev/vdd --type device -o /root/results -m randread --loops 1 --iodepth 128 --numjobs 1 --runtime 5 --destructive --rwmixread 50 50 -b 4k\n      # Create plots Sample\n      /usr/local/bin/fio-plot -i /root/results/vdd/16k  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randwrite -d 128  256  512  1024 -n 4 -o /root/results/randwrite-4.png\n      /usr/local/bin/fio-plot -i /root/results/vdd/16k  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randread -d 128  256  512  1024 -n 4 -o /root/results/randread-4.png\n      /usr/local/bin/fio-plot -i /root/results/vdd/randrw50  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randrw -d 128  256  512  1024 -n 4 -o /root/results/randrw-4.png\n      filename=fio-8TB_prefil_vol$(date +'%d-%m-%y:%R:%s').tar.gz\n      echo $filename\n      tar -zcvf /tmp/$filename /root/results/*\n      touch /root/run_finished\n  - path: \"/root/generatePlots.sh\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      #! /bin/bash\n      myarray=(randread)\n      opt=\"\"\n      israndrw=\"\"\n      for i in \"${myarray[@]}\"\n      do\n         echo \"$i\"\n         if [ \"$i\" == \"randrw\" ]; then\n             israndrw=\"randrw\"\n         else\n             opt+=$i\n             opt+=\" \"\n          fi\n      done\n\n      for i in /dev/vdd\n      do\n         for j in 4k\n         do\n            for k in 1\n            do\n               for l in ${opt}\n               do\n                    diskname=$(echo $i | cut -d '/' -f 3)\n                    echo \"/usr/local/bin/fio-plot -i /root/results/$diskname/$j  --source \\\"Acadia Performance\\\" -T \\\"VDD Test 16k\\\" -l -r $l -d 128  256  512  1024 -n $k -o $j-$l-$k.png\"\n                    /usr/local/bin/fio-plot -i /root/results/$diskname/$j  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r $l -d 128  256  512  1024 -n $k -o $j-$l-$k.png\n               done\n            done\n         done\n      done\n\n      if [ \"$$opt\" != \"\" ]; then\n          exit 0\n      fi\n\n      for i in /dev/vdd; do\n         for j in 4k; do\n            for k in 1; do\n               diskname=$(echo $i | cut -d '/' -f 3)\n               for l in `ls -d /root/results/$diskname/rand*`; do\n                 name=$(basename $l)\n                 for m in read write; do\n                    echo \"/usr/local/bin/fio-plot -i $l/$j  --source \\\"Acadia Performance\\\" -T \\\"VDD Test 16k\\\" -l -r randrw -f $m -d 128  256  512  1024 -n $k -o /root/results/$j-$name-$k-$m.png\"\n                   /usr/local/bin/fio-plot -i $l/$j  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randrw -f $m  -d 128  256  512  1024 -n $k -o /root/results/$j-$name-$k-$m.png\n                 done\n               done\n            done\n         done\n      done\n\n  - path: \"/root/.s3cfg\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      [default]\n      access_key = \n      access_token = \n      add_encoding_exts =\n      add_headers =\n      bucket_location = US\n      ca_certs_file =\n      cache_file =\n      check_ssl_certificate = True\n      check_ssl_hostname = True\n      cloudfront_host = cloudfront.amazonaws.com\n      connection_max_age = 5\n      connection_pooling = True\n      content_disposition =\n      content_type =\n      default_mime_type = binary/octet-stream\n      delay_updates = False\n      delete_after = False\n      delete_after_fetch = False\n      delete_removed = False\n      dry_run = False\n      enable_multipart = True\n      encoding = UTF-8\n      encrypt = False\n      expiry_date =\n      expiry_days =\n      expiry_prefix =\n      follow_symlinks = False\n      force = False\n      get_continue = False\n      gpg_command = /usr/bin/gpg\n      gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\n      gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\n      gpg_passphrase = ausgen\n      guess_mime_type = True\n      host_base = s3.eu-gb.cloud-object-storage.appdomain.cloud\n      host_bucket = %(bucket)s.s3.eu-gb.cloud-object-storage.appdomain.cloud\n      human_readable_sizes = False\n      invalidate_default_index_on_cf = False\n      invalidate_default_index_root_on_cf = True\n      invalidate_on_cf = False\n      kms_key =\n      limit = -1\n      limitrate = 0\n      list_allow_unordered = False\n      list_md5 = False\n      log_target_prefix =\n      long_listing = False\n      max_delete = -1\n      mime_type =\n      multipart_chunk_size_mb = 15\n      multipart_copy_chunk_size_mb = 1024\n      multipart_max_chunks = 10000\n      preserve_attrs = True\n      progress_meter = True\n      proxy_host =\n      proxy_port = 0\n      public_url_use_https = False\n      put_continue = False\n      recursive = False\n      recv_chunk = 65536\n      reduced_redundancy = False\n      restore_days = 1\n      restore_priority = Standard\n      secret_key = \n      send_chunk = 65536\n      server_side_encryption = False\n      signature_v2 = False\n      signurl_use_https = False\n      simpledb_host = sdb.amazonaws.com\n      skip_existing = False\n      socket_timeout = 300\n      ssl_client_cert_file =\n      ssl_client_key_file =\n      stats = False\n      stop_on_error = False\n      storage_class =\n      throttle_max = 100\n      upload_id =\n      urlencoding_mode = normal\n      use_http_expect = False\n      use_https = True\n      use_mime_magic = True\n      verbosity = WARNING\n      website_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com/\n      website_error =\n      website_index = index.html",
                "content_type": "text/cloud-config",
                "filename": "",
                "merge_type": ""
              },
              {
                "content": "#cloud-config\nruncmd:\n  - [ sh, -c, \"pip3 install --no-cache --upgrade pip setuptools\" ]\n  - [ sh, -c, \"pip3 install python-dateutil\" ]\n  - [ sh, -c, \"pip3 install s3cmd\" ]\n  - [ sh, -c, \"pip3 install fio-plot\" ]\n  - [ sh, -c, \"/root/runFioTest.sh\" ]\n  - [ sh, -c, \"/root/generatePlots.sh\" ]\n  - [ sh, -c, \" s3cmd sync  /tmp/fio*  s3://cos-acadia-gartner/test/\" ]\n  - [ sh, -c, \"touch /root/run_finished\"]\n\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nfinal_message: \"System boot (via cloud-init) is COMPLETE, after $UPTIME seconds. Finished at $TIMESTAMP\"\n",
                "content_type": "text/cloud-config",
                "filename": "",
                "merge_type": ""
              }
            ],
            "rendered": "Content-Type: multipart/mixed; boundary=\"MIMEBOUNDARY\"\nMIME-Version: 1.0\r\n\r\n--MIMEBOUNDARY\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\napt:\n  conf: |\n     APT {\n         Get {\n             Assume-Yes \"true\";\n             Fix-Broken \"true\";\n         }\n     }\n  primary:\n    - arches: [default]\n      uri:  http://mirrors.adn.networklayer.com/ubuntu\npackage-update: true\npackage_upgrade: true\npackages:\n - python3\n - jq\n - fio\n - nginx\n - iperf\n - zlib1g-dev\n - libjpeg-dev\n - python3-pip\r\n--MIMEBOUNDARY\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\n\nwrite_files:\n  - path: \"/root/runFioTest.sh\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      #! /bin/bash\n      /usr/local/bin/bench-fio -e libaio --target /dev/vdd --type device -o /root/results -m randread --loops 1 --iodepth 128 --numjobs 1 --runtime 5 --destructive --rwmixread 50 50 -b 4k\n      # Create plots Sample\n      /usr/local/bin/fio-plot -i /root/results/vdd/16k  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randwrite -d 128  256  512  1024 -n 4 -o /root/results/randwrite-4.png\n      /usr/local/bin/fio-plot -i /root/results/vdd/16k  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randread -d 128  256  512  1024 -n 4 -o /root/results/randread-4.png\n      /usr/local/bin/fio-plot -i /root/results/vdd/randrw50  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randrw -d 128  256  512  1024 -n 4 -o /root/results/randrw-4.png\n      filename=fio-8TB_prefil_vol$(date +'%d-%m-%y:%R:%s').tar.gz\n      echo $filename\n      tar -zcvf /tmp/$filename /root/results/*\n      touch /root/run_finished\n  - path: \"/root/generatePlots.sh\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      #! /bin/bash\n      myarray=(randread)\n      opt=\"\"\n      israndrw=\"\"\n      for i in \"${myarray[@]}\"\n      do\n         echo \"$i\"\n         if [ \"$i\" == \"randrw\" ]; then\n             israndrw=\"randrw\"\n         else\n             opt+=$i\n             opt+=\" \"\n          fi\n      done\n\n      for i in /dev/vdd\n      do\n         for j in 4k\n         do\n            for k in 1\n            do\n               for l in ${opt}\n               do\n                    diskname=$(echo $i | cut -d '/' -f 3)\n                    echo \"/usr/local/bin/fio-plot -i /root/results/$diskname/$j  --source \\\"Acadia Performance\\\" -T \\\"VDD Test 16k\\\" -l -r $l -d 128  256  512  1024 -n $k -o $j-$l-$k.png\"\n                    /usr/local/bin/fio-plot -i /root/results/$diskname/$j  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r $l -d 128  256  512  1024 -n $k -o $j-$l-$k.png\n               done\n            done\n         done\n      done\n\n      if [ \"$$opt\" != \"\" ]; then\n          exit 0\n      fi\n\n      for i in /dev/vdd; do\n         for j in 4k; do\n            for k in 1; do\n               diskname=$(echo $i | cut -d '/' -f 3)\n               for l in `ls -d /root/results/$diskname/rand*`; do\n                 name=$(basename $l)\n                 for m in read write; do\n                    echo \"/usr/local/bin/fio-plot -i $l/$j  --source \\\"Acadia Performance\\\" -T \\\"VDD Test 16k\\\" -l -r randrw -f $m -d 128  256  512  1024 -n $k -o /root/results/$j-$name-$k-$m.png\"\n                   /usr/local/bin/fio-plot -i $l/$j  --source \"Acadia Performance\" -T \"VDD Test 16k\" -l -r randrw -f $m  -d 128  256  512  1024 -n $k -o /root/results/$j-$name-$k-$m.png\n                 done\n               done\n            done\n         done\n      done\n\n  - path: \"/root/.s3cfg\"\n    permissions: \"0755\"\n    owner: \"root\"\n    content: |\n      [default]\n      access_key = \n      access_token = \n      add_encoding_exts =\n      add_headers =\n      bucket_location = US\n      ca_certs_file =\n      cache_file =\n      check_ssl_certificate = True\n      check_ssl_hostname = True\n      cloudfront_host = cloudfront.amazonaws.com\n      connection_max_age = 5\n      connection_pooling = True\n      content_disposition =\n      content_type =\n      default_mime_type = binary/octet-stream\n      delay_updates = False\n      delete_after = False\n      delete_after_fetch = False\n      delete_removed = False\n      dry_run = False\n      enable_multipart = True\n      encoding = UTF-8\n      encrypt = False\n      expiry_date =\n      expiry_days =\n      expiry_prefix =\n      follow_symlinks = False\n      force = False\n      get_continue = False\n      gpg_command = /usr/bin/gpg\n      gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\n      gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s\n      gpg_passphrase = ausgen\n      guess_mime_type = True\n      host_base = s3.eu-gb.cloud-object-storage.appdomain.cloud\n      host_bucket = %(bucket)s.s3.eu-gb.cloud-object-storage.appdomain.cloud\n      human_readable_sizes = False\n      invalidate_default_index_on_cf = False\n      invalidate_default_index_root_on_cf = True\n      invalidate_on_cf = False\n      kms_key =\n      limit = -1\n      limitrate = 0\n      list_allow_unordered = False\n      list_md5 = False\n      log_target_prefix =\n      long_listing = False\n      max_delete = -1\n      mime_type =\n      multipart_chunk_size_mb = 15\n      multipart_copy_chunk_size_mb = 1024\n      multipart_max_chunks = 10000\n      preserve_attrs = True\n      progress_meter = True\n      proxy_host =\n      proxy_port = 0\n      public_url_use_https = False\n      put_continue = False\n      recursive = False\n      recv_chunk = 65536\n      reduced_redundancy = False\n      restore_days = 1\n      restore_priority = Standard\n      secret_key = \n      send_chunk = 65536\n      server_side_encryption = False\n      signature_v2 = False\n      signurl_use_https = False\n      simpledb_host = sdb.amazonaws.com\n      skip_existing = False\n      socket_timeout = 300\n      ssl_client_cert_file =\n      ssl_client_key_file =\n      stats = False\n      stop_on_error = False\n      storage_class =\n      throttle_max = 100\n      upload_id =\n      urlencoding_mode = normal\n      use_http_expect = False\n      use_https = True\n      use_mime_magic = True\n      verbosity = WARNING\n      website_endpoint = http://%(bucket)s.s3-website-%(location)s.amazonaws.com/\n      website_error =\n      website_index = index.html\r\n--MIMEBOUNDARY\r\nContent-Transfer-Encoding: 7bit\r\nContent-Type: text/cloud-config\r\nMime-Version: 1.0\r\n\r\n#cloud-config\nruncmd:\n  - [ sh, -c, \"pip3 install --no-cache --upgrade pip setuptools\" ]\n  - [ sh, -c, \"pip3 install python-dateutil\" ]\n  - [ sh, -c, \"pip3 install s3cmd\" ]\n  - [ sh, -c, \"pip3 install fio-plot\" ]\n  - [ sh, -c, \"/root/runFioTest.sh\" ]\n  - [ sh, -c, \"/root/generatePlots.sh\" ]\n  - [ sh, -c, \" s3cmd sync  /tmp/fio*  s3://cos-acadia-gartner/test/\" ]\n  - [ sh, -c, \"touch /root/run_finished\"]\n\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nfinal_message: \"System boot (via cloud-init) is COMPLETE, after $UPTIME seconds. Finished at $TIMESTAMP\"\n\r\n--MIMEBOUNDARY--\r\n"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "ibm_is_ssh_key",
      "name": "sshkey",
      "provider": "provider[\"registry.terraform.io/ibm-cloud/ibm\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "crn": "crn:v1:bluemix:public:is:eu-gb:a/3cd0a9db3f1b4a2395f023f044faa96c::key:r018-87e9ff14-ac80-4864-813b-69a0630da158",
            "fingerprint": "SHA256:J7QUKmeAbqQs8my1oLqgzDk/FNT565fdemeGWNSkLY8",
            "id": "r018-87e9ff14-ac80-4864-813b-69a0630da158",
            "length": 4096,
            "name": "siddaraju-ssh-laptop",
            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQClJ8DkMtMdJK9Ls1BZ2KZmML8kJ2LgYE/9CIjd8Oa9Y7RKutjKlJVaRXY1L/t4mKaQUeqYO0kAVzpbuR7moWWHkv1Od+THeeMhh7ZuXNZdaah0gUlFmU3XN9GveE/UPfSQ+BhN2WyrkAVhBwI+3pXqSkYAAx8QPCjzzahyex+tNzuVgbPC/TifJPy3owzSxTL2KHZwW8PgKVw9dfTPDOoRSmQPWsjcpOm/Mhz5NV8ZJkTec3VXAqrGw5gEjoBLyARDbfDLgmBJyTm0sqS021jwMyqY5HkMGWVCVxj9BopBCcmMHqSre1CABZXIs0Hi10PWV1YMc92QX4i1Emz8G6IeYOgfiPz+5DhXaKeg0aqTNHanjVbaXAk79UzMD8yvvMZ7DVuWo8K4esSTsI8M/BLr3rnD2A5ziKvTMJ1DiniBAC87qD/XiynjbBFMCXWhesscvblm1HtkV+7PJ3rjdwTSJpIOM6F5ErBZeUAYN/J6UzDFfGyWYoePTl32K32nfCi6QVu0GhBNylXIcFepR757q9T8nfd57pNNGYZa8oxtsuAA6RdathQPTWjAnXpDpUDX2M41IfkslrlRZoY8JfCDFMQSegP8AoNrDJ0fxCL/pYpQcdiBxPB3SW5XgMtye46GwZLZ4eb13p+rU4QT6A6SjXuCfdicTIk421N5FNluhQ==",
            "resource_controller_url": "https://cloud.ibm.com/vpc/compute/sshKeys",
            "resource_crn": "crn:v1:bluemix:public:is:eu-gb:a/3cd0a9db3f1b4a2395f023f044faa96c::key:r018-87e9ff14-ac80-4864-813b-69a0630da158",
            "resource_group": null,
            "resource_group_name": "37852e18d76f48088660b6adcb16c40b",
            "resource_name": "siddaraju-ssh-laptop",
            "type": "rsa"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "install_packages",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "#cloud-config\napt:\n  conf: |\n     APT {\n         Get {\n             Assume-Yes \"true\";\n             Fix-Broken \"true\";\n         }\n     }\n  primary:\n    - arches: [default]\n      uri:  http://mirrors.adn.networklayer.com/ubuntu\npackage-update: true\npackage_upgrade: true\npackages:\n - python3\n - jq\n - fio\n - nginx\n - iperf\n - zlib1g-dev\n - libjpeg-dev\n - python3-pip",
            "content_base64": "I2Nsb3VkLWNvbmZpZwphcHQ6CiAgY29uZjogfAogICAgIEFQVCB7CiAgICAgICAgIEdldCB7CiAgICAgICAgICAgICBBc3N1bWUtWWVzICJ0cnVlIjsKICAgICAgICAgICAgIEZpeC1Ccm9rZW4gInRydWUiOwogICAgICAgICB9CiAgICAgfQogIHByaW1hcnk6CiAgICAtIGFyY2hlczogW2RlZmF1bHRdCiAgICAgIHVyaTogIGh0dHA6Ly9taXJyb3JzLmFkbi5uZXR3b3JrbGF5ZXIuY29tL3VidW50dQpwYWNrYWdlLXVwZGF0ZTogdHJ1ZQpwYWNrYWdlX3VwZ3JhZGU6IHRydWUKcGFja2FnZXM6CiAtIHB5dGhvbjMKIC0ganEKIC0gZmlvCiAtIG5naW54CiAtIGlwZXJmCiAtIHpsaWIxZy1kZXYKIC0gbGlianBlZy1kZXYKIC0gcHl0aG9uMy1waXA=",
            "filename": "./cloud-init-packages.tpl",
            "id": "9eda80691aaf1055590932f3ba6a6fd36fc3b6bd"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "local_file",
      "name": "run_scripts",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "#cloud-config\nruncmd:\n  - [ sh, -c, \"pip3 install --no-cache --upgrade pip setuptools\" ]\n  - [ sh, -c, \"pip3 install python-dateutil\" ]\n  - [ sh, -c, \"pip3 install s3cmd\" ]\n  - [ sh, -c, \"pip3 install fio-plot\" ]\n  - [ sh, -c, \"/root/runFioTest.sh\" ]\n  - [ sh, -c, \"/root/generatePlots.sh\" ]\n  - [ sh, -c, \" s3cmd sync  /tmp/fio*  s3://cos-acadia-gartner/test/\" ]\n  - [ sh, -c, \"touch /root/run_finished\"]\n\noutput: {all: '| tee -a /var/log/cloud-init-output.log'}\nfinal_message: \"System boot (via cloud-init) is COMPLETE, after $UPTIME seconds. Finished at $TIMESTAMP\"\n",
            "content_base64": "I2Nsb3VkLWNvbmZpZwpydW5jbWQ6CiAgLSBbIHNoLCAtYywgInBpcDMgaW5zdGFsbCAtLW5vLWNhY2hlIC0tdXBncmFkZSBwaXAgc2V0dXB0b29scyIgXQogIC0gWyBzaCwgLWMsICJwaXAzIGluc3RhbGwgcHl0aG9uLWRhdGV1dGlsIiBdCiAgLSBbIHNoLCAtYywgInBpcDMgaW5zdGFsbCBzM2NtZCIgXQogIC0gWyBzaCwgLWMsICJwaXAzIGluc3RhbGwgZmlvLXBsb3QiIF0KICAtIFsgc2gsIC1jLCAiL3Jvb3QvcnVuRmlvVGVzdC5zaCIgXQogIC0gWyBzaCwgLWMsICIvcm9vdC9nZW5lcmF0ZVBsb3RzLnNoIiBdCiAgLSBbIHNoLCAtYywgIiBzM2NtZCBzeW5jICAvdG1wL2ZpbyogIHMzOi8vY29zLWFjYWRpYS1nYXJ0bmVyL3Rlc3QvIiBdCiAgLSBbIHNoLCAtYywgInRvdWNoIC9yb290L3J1bl9maW5pc2hlZCJdCgpvdXRwdXQ6IHthbGw6ICd8IHRlZSAtYSAvdmFyL2xvZy9jbG91ZC1pbml0LW91dHB1dC5sb2cnfQpmaW5hbF9tZXNzYWdlOiAiU3lzdGVtIGJvb3QgKHZpYSBjbG91ZC1pbml0KSBpcyBDT01QTEVURSwgYWZ0ZXIgJFVQVElNRSBzZWNvbmRzLiBGaW5pc2hlZCBhdCAkVElNRVNUQU1QIgo=",
            "filename": "./cloud-init-run-script.tpl",
            "id": "ed558b5241ae94b0e4d9c38d3c70432433a473b4"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "ibm_is_instance_volume_attachment",
      "name": "example",
      "provider": "provider[\"registry.terraform.io/ibm-cloud/ibm\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "capacity": 10,
            "delete_volume_on_attachment_delete": false,
            "delete_volume_on_instance_delete": false,
            "device": "0797-37c8dac4-9942-4a0b-b12b-f34a7c3c4de1-nkx68",
            "encryption_key": null,
            "href": "https://eu-gb.iaas.cloud.ibm.com/v1/instances/0797_0c8e7645-00d6-4b53-bea7-6a88f645328a/volume_attachments/0797-37c8dac4-9942-4a0b-b12b-f34a7c3c4de1",
            "id": "0797_0c8e7645-00d6-4b53-bea7-6a88f645328a/0797-37c8dac4-9942-4a0b-b12b-f34a7c3c4de1",
            "instance": "0797_0c8e7645-00d6-4b53-bea7-6a88f645328a",
            "iops": 3000,
            "name": "volume-attach-0",
            "profile": "general-purpose",
            "snapshot": null,
            "status": "attached",
            "timeouts": null,
            "type": "data",
            "volume": "r018-a945dfc9-9eaf-4169-a20c-c72da3620c94",
            "volume_attachment_id": "0797-37c8dac4-9942-4a0b-b12b-f34a7c3c4de1",
            "volume_crn": "crn:v1:bluemix:public:is:eu-gb-2:a/3cd0a9db3f1b4a2395f023f044faa96c::volume:r018-a945dfc9-9eaf-4169-a20c-c72da3620c94",
            "volume_deleted": null,
            "volume_href": "https://eu-gb.iaas.cloud.ibm.com/v1/volumes/r018-a945dfc9-9eaf-4169-a20c-c72da3620c94",
            "volume_name": "test-vol1"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19"
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "capacity": 10,
            "delete_volume_on_attachment_delete": false,
            "delete_volume_on_instance_delete": false,
            "device": "0797-c451b64f-adf3-4c9f-ad68-b1011c848547-ck8ts",
            "encryption_key": null,
            "href": "https://eu-gb.iaas.cloud.ibm.com/v1/instances/0797_0c8e7645-00d6-4b53-bea7-6a88f645328a/volume_attachments/0797-c451b64f-adf3-4c9f-ad68-b1011c848547",
            "id": "0797_0c8e7645-00d6-4b53-bea7-6a88f645328a/0797-c451b64f-adf3-4c9f-ad68-b1011c848547",
            "instance": "0797_0c8e7645-00d6-4b53-bea7-6a88f645328a",
            "iops": 3000,
            "name": "volume-attach-1",
            "profile": "general-purpose",
            "snapshot": null,
            "status": "attached",
            "timeouts": null,
            "type": "data",
            "volume": "r018-81498137-5d6f-4343-a607-717fcfc3d9ef",
            "volume_attachment_id": "0797-c451b64f-adf3-4c9f-ad68-b1011c848547",
            "volume_crn": "crn:v1:bluemix:public:is:eu-gb-2:a/3cd0a9db3f1b4a2395f023f044faa96c::volume:r018-81498137-5d6f-4343-a607-717fcfc3d9ef",
            "volume_deleted": null,
            "volume_href": "https://eu-gb.iaas.cloud.ibm.com/v1/volumes/r018-81498137-5d6f-4343-a607-717fcfc3d9ef",
            "volume_name": "test-vol2"
          },
          "sensitive_attributes": [],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo2MDAwMDAwMDAwMDAsImRlbGV0ZSI6NjAwMDAwMDAwMDAwLCJ1cGRhdGUiOjYwMDAwMDAwMDAwMH19"
        }
      ]
    },
    {
      "mode": "managed",
      "type": "random_string",
      "name": "rand_name",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 2,
          "attributes": {
            "id": "mwo93kuf",
            "keepers": null,
            "length": 8,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "mwo93kuf",
            "special": false,
            "upper": false
          },
          "sensitive_attributes": []
        }
      ]
    }
  ],
  "check_results": []
}
